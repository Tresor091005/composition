  createPost() async {
    setState(() {
      loading = true;
    });
    try {

      Map<String, dynamic> data = {
        'title': titleController.text,
        'content': contentController.text,
      };

      await postService.create(data);

      titleController.text = "";
      contentController.text = "";

      Fluttertoast.showToast(msg: "Poste créé avec succès");

    } on DioException catch (e) {

      if (e.response != null) {
        print(e.response?.data);
        print(e.response?.statusCode);
      } else {
        // Something happened in setting up or sending the request that triggered an Error
        print(e.requestOptions);
        print(e.message);
      }

      Fluttertoast.showToast(msg: "Une erreur est survenue");

    } finally {
      setState(() {
        loading = false;
      });
    }

  }
  
  createUser() async {
    setState(() {
      loading = true;
    });
    try {

      Map<String, dynamic> data = {
        'email': emailController.text,
        'fullname': fullnameController.text,
        'password': passwordController.text
      };
      await userService.create(data);

      passwordController.text = "";
      fullnameController.text = "";
      emailController.text = "";

      Fluttertoast.showToast(msg: "Utilisateur créé avec succès");

    } on DioException catch (e) {

      if (e.response != null) {
        print(e.response?.data);
        print(e.response?.statusCode);
      } else {
        // Something happened in setting up or sending the request that triggered an Error
        print(e.requestOptions);
        print(e.message);
      }

      Fluttertoast.showToast(msg: "Une erreur est survenue");

    } finally {
      setState(() {
        loading = false;
      });
    }

  }
  
    loginUser() async {

    // déclencher le loading
    setState(() {
      loading = true;
    });

    try {

      // Prépare les données à envoyer
      Map<String, dynamic> data = {
        'email': emailController.text,
        'strategy': 'local',
        'password': passwordController.text
      };

      // Lancer la requête
      AuthenticatedUser authUser = await userService.login(data);

      // Initialiser une instance de shared preference
      final sharedPref = await SharedPreferences.getInstance();

      // Sauvegerder le token en mémoire
      sharedPref.setString("token", authUser.accessToken!);

      // Afficher un message de succès
      Fluttertoast.showToast(msg: "Utilisateur connecté avec succès");

      // rediriger vers la page home
      Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (context) => PostsPage())
      );

    } on DioException catch (e) {

      // Quand erreur de requête, afficher les erreurs et le status code
      if (e.response != null) {
        print(e.response?.data);
        print(e.response?.statusCode);
      } else {
        // Something happened in setting up or sending the request that triggered an Error
        print(e.requestOptions);
        print(e.message);
      }

      Fluttertoast.showToast(msg: "Une erreur est survenue");

    } finally {
      setState(() {
        loading = false;
      });
    }

  }
  
   loadPosts() async {
    setState(() {
      loading = true;
    });
    try {

      posts = await postService.getAll();
      setState(() {});

    } on DioException catch (e) {

      if (e.response != null) {
        print(e.response?.data);
        print(e.response?.statusCode);
      } else {
        // Something happened in setting up or sending the request that triggered an Error
        print(e.requestOptions);
        print(e.message);
      }

      Fluttertoast.showToast(msg: "Une erreur est survenue");

    } finally {
      setState(() {
        loading = false;
      });
    }

  }
